# -*- coding: utf-8 -*-
"""Shop Customer Data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ENzXwCkkqcE8m1Defl3yGEhFD7eiz5hw

# [Shop Customer Data - Dữ liệu khách hàng của cửa hàng](https://www.kaggle.com/datasets/datascientistanna/customers-dataset)
# **1.Thông tin tập dữ liệu**
- Loại bài toán: **Bài toán phân loại (classification)**
- Kích thước dữ liệu: 2000 dòng
- Chiều của dữ liệu: 7 cột
- Dữ liệu đầu vào: Một tập dữ liệu Shop Customer Data Set đã được kiểm tra tính đầy đủ và độ chính xác
- Kết quả đầu ra: Một tập dữ liệu đã được xử lý, phân tích và khai thác để đưa ra những kết luận

**Thông tin tập dữ liệu thông tin các khách hàng đã mua hàng:**
  + Cột 1: Gender of a customer - **Giới tính**
  + Cột 2: Age - **Độ tuổi**
  + Cột 3: Annual income of a customer - **Thu nhập mỗi năm**
  + Cột 4: Score - **Điểm thành viên**
  + Cột 5: Profession of a customer - **Nghề nghiệp** 
  + Cột 6: Work Experience - **Kinh nghiệm làm việc**
  + Cột 7: Family Size - **Số người trong gia đình**

**Thông tin thuộc tính:**
+ **Gender**: Giới tính của một khách hàng
+ **Age**: Tuổi của một khách hàng
+ **Annual Income**: Thu nhập hàng năm của một khách hàng
+ **Score**: Điểm chi tiêu/ thành viên ở cửa hàng dựa trên nhu cầu mua sắm của từng khách hàng
+ **Profession**: Nghiệp vụ của khách hàng đó
+ **Work Experience**: Kinh nghiệm làm viẹc của khách hàng (được tính dựa trên số năm)
+ **Family Size**: Số lượng thành viên có trong gia đình của khách hàng đó

---
# **Chuẩn bị tập dữ liệu**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter
from pylab import rcParams
import seaborn as sns
# %matplotlib inline
rcParams['figure.figsize'] = 8,6
import seaborn as sb
sb.set_style('whitegrid')

"""Kết nối với Google drive"""

from google.colab import drive
drive.mount('/content/drive')

"""Đọc dữ liệu từ file **Customers.data**, Với các chỉ định của file đọc vào:
- encoding: mặc định là utf-8
- sep: dấu ngăn cách giữa các cột. Mặc định là dấu phẩy (‘,’)
- header: có header(tiêu đề của các cột)

Lúc này:
data sẽ là một đối tượng có hàng, cột gọi là DataFrame.
"""

# đọc file dữ liệu
data = pd.read_csv('/content/drive/MyDrive/Khai phá dữ liệu 2023/GK/Customers.csv')
#data.head()
data.head()

"""**Kích thước của data**
- Phần đầu tiên thể hiện số dòng của dữ liệu
- Phần thứ hai thể hiện số cột của dữ liệu
"""

data.shape

"""**Xem thông tin của data**

Thông tin về Index, kiểu dữ liệu và dung lượng của DataFrame
"""

data.info()

"""---
# **2. Phân tích dữ liệu khám phá**
  
**`2.1. Tiền xử lý dữ liệu`**

**Xác định và xử lý các dữ liệu bị thiếu**
"""

# Xác định các dữ liệu bị thiếu
data.isnull()

# Đếm các dữ liệu thiếu trong từng cột
data.isnull().sum()

# Tính giá trị % dữ liệu bị thiếu trong cột
data[data.columns[data.isnull().any()]].isnull().sum() * 100 / data.shape[0]

"""***Xem xét dữ liệu có nên bị xóa hay thay thế:***
- nếu dữ liệu bị null nhỏ hơn 10% trong bảng dữ liệu của chúng ta, ta có thể xóa nó
- nếu lớn hơn 10%, ta dùng phương pháp thay thế dữ liệu thiếu.
Tập dử liệu này không có dữ liệu bị thiếu


> Ở đây dữ liệu nhỏ hơn 10% nên chúng ta có thể xóa nó và nó không ảnh hưởng nhiều đến dữ liệu
"""

# Loại bỏ các dữ liệu bị thiếu
data.dropna(inplace=True)
data

"""**Xác định và xử lý các bộ giá trị trùng lặp trong data.**

Theo mặc định, đối với mỗi bộ giá trị trùng lặp, lần xuất hiện đầu tiên được đặt thành False và tất cả các giá trị khác thành True
"""

#Xác định bộ giá trị trùng lặp
data.duplicated()

print("Số lượng dữ liệu trùng lặp", len(data[data.duplicated()]))
data[data.duplicated()]

"""**Loại bỏ các dữ liệu trùng lặp không cần thiết**"""

print("Kích thước của Data trước khi xóa các hàng trùng lặp", data.shape)
data = data.drop_duplicates()
data.index = range(len(data))
print("Kích thước của Data sau khi xóa các hàng trùng lặp", data.shape)

"""**Xác định và Xử lý dữ liệu ngoại lai Outliers**

Phát hiện outliers

***Xác định và xử lý outliers của thuộc tính Age***
"""

#ngưỡng dưới, ngưỡng trên của biến Tuổi Age
min_threshold, max_threshold = data.Age.quantile([0.01, 0.99])
min_threshold, max_threshold

#tập dữ liệu trên max_threshold -> outliers
data[data['Age']>max_threshold]

#tập dữ liệu dưới min_threshold -> outliers
data[data['Age']<min_threshold]

#xóa outliers
data = data[(data['Age']<max_threshold)&(data['Age']>min_threshold)]
data

"""***Xác định và xử lý outliers của thuộc tính Annual Income***"""

#Thu nhập hàng năm - Annual Income
AnnualIncome_min_threshold, AnnualIncome_max_threshold = data.AnnualIncome.quantile([0.01, 0.99])
#AnnualIncome_min_threshold= data['AnnualIncome'].min()
#AnnualIncome_max_threshold= data['AnnualIncome'].max()
data = data[(data['AnnualIncome']<AnnualIncome_max_threshold)&(data['AnnualIncome']>AnnualIncome_min_threshold)]

"""***Xác định và xử lý outliers của thuộc tính Score***"""

#Điểm thành viên - Score
Score_min_threshold, Score_max_threshold = data.Score.quantile([0.01, 0.99])
data = data[(data['Score']<Score_max_threshold)&(data['Score']>Score_min_threshold)]

"""***Xác định và xử lý outliers của thuộc tính Work Experience***"""

#Kinh nghiệm làm việc - Work Experience
WorkExperience_min_threshold, WorkExperience_max_threshold = data.WorkExperience.quantile([0.01, 0.99])
data = data[(data['WorkExperience']<WorkExperience_max_threshold)&(data['WorkExperience']>WorkExperience_min_threshold)]

"""***Xác định và xử lý outliers của thuộc tính Family Size***"""

#Tổng thành viên trong gia đình - Family Size
FamilySize_min_threshold, FamilySize_max_threshold = data.FamilySize.quantile([0.01, 0.99])
data = data[(data['FamilySize']<FamilySize_max_threshold)&(data['FamilySize']>FamilySize_min_threshold)]

"""***Kích thước của tập dữ liệu sau khi đã xử lý outliers***"""

data.shape

"""**Xác đinh và xử lý dữ liệu nhiễu**"""

#Xác đinh dữ liệu nhiễu
Noisy_data = data[( (data['Age'] < 0) | (data['AnnualIncome'] < 0) | (data['Score'] < 0) | (data['WorkExperience'] < 0) | (data['FamilySize'] < 0 ) )]
Noisy_data

#Xử lý dữ liệu nhiễu
data = data[(data['Age'] > 0 ) & (data['AnnualIncome'] > 0) & (data['Score'] > 0) & (data['WorkExperience'] > 0) & (data['FamilySize'] > 0)]
data.shape

"""**Xuất tập dữ liệu**"""

#Xuất tập dữ liệu
data.to_csv('/content/drive/MyDrive/Khai phá dữ liệu 2023/GK/Output.csv', index=False)

"""**2.2. Khám phá dữ liệu**

  **2.2.1.** Phân tích thống kê mô tả

**Giá trị trung bình**
"""

#Giá trị trung bình làm tròn đến 0.1
mean=data.mean().round(1)
print(mean)

"""**Giá trị trung vị**"""

#Gia trị trung vị làm tròn đến 0.1
median=data.median().round(1)
print(median)

"""**Độ lệch chuẩn**"""

#Độ lệch chuẩn làm tròn đến 0.1
std=data.std().round(1)
print(std)

"""**Phân vị**"""

#Giá trị phân vị làm tròn đến 0.1
describe=data.describe().round(1)
print(describe)

"""**2.2.2.** Phân tích đơn biến

**Xem xét phân bố của từng biến trong dữ liệu bằng cách sử dụng histogram.**

**Gender (Giới tính)**
"""

print(data['Gender'].value_counts())

"""Tính tỉ lệ phần trăm giữa 2 giới tính"""

# Đếm số lượng giá trị unique của mỗi nhóm
value_counts = data['Gender'].value_counts()

# Tính tỉ lệ phần trăm giữa hai giá trị
male_percentage = value_counts['Male'] / len(data) * 100
female_percentage = value_counts['Female'] / len(data) * 100

print("Phần trăm Male:", male_percentage.round(1))
print("Phần trăm Famale:", female_percentage.round(1))

# Dữ liệu tỉ lệ phần trăm giữa 2 giới tính
gender_percentage = [male_percentage, female_percentage]  # [nam, nữ]

# Tên nhãn cho biểu đồ
labels = ['Nam', 'Nữ']

# Màu sắc cho các miền trong biểu đồ
colors = ['lightblue', 'pink']

# Vẽ biểu đồ đồ họa tròn
plt.pie(gender_percentage, labels=labels, colors=colors, autopct='%1.11f%%')

# Đặt tiêu đề cho biểu đồ
plt.title("Tỉ lệ phần trăm giữa 2 giới tính")

# Hiển thị biểu đồ
plt.show()

"""**Age (Tuổi)**"""

print(data['Age'].value_counts())

maxAge = data['Age'].max()
minAge = data['Age'].min()
plt.hist(data['Age'], bins=50, range=(minAge-1, maxAge))
# Đặt tên cho trục x và trục y
plt.xlabel('Tuổi')
plt.ylabel('Số lượng khách hàng')
plt.show()

"""- Trục x: là số tuổi (Tuổi)
- Trục y: là số lượng khách hàng (Người)

**Nhận xét:**
- Trong khoảng độ tuổi từ 34-36 tuổi là là độ tuổi khách hàng nhiều nhất
- Trong khoảng từ 70 tuổi trở đi khách hàng ít có nhu cầu mua hàng hơn

**=>** Độ tuổi phụ nữ mang thai còn quá trẻ

**Annual Income (Thu nhập hàng năm)**
"""

print(data['AnnualIncome'].value_counts())

maxAnnualIncome = data['AnnualIncome'].max()
minAnnualIncome = data['AnnualIncome'].min()
plt.xlabel('Thu nhập hàng năm')
plt.ylabel('Số tiền kiếm được trong 1 năm')
plt.hist(data['AnnualIncome'], bins=19, range=(minAnnualIncome, maxAnnualIncome))
plt.show()

"""- Trục x : Số tiền thu nhập hàng năm ($)
- Trục y : Số lượng người theo từng thu nhập (Người)

**Nhận xét**
- Số lượng thu nhập  từ $75989 - $94987 có nhiều người kiếm được nhất trong hàng năm

**Score (Điểm thành viên)**
"""

print(data['Score'].value_counts())

maxScore = data['Score'].max()
minScore = data['Score'].min()
plt.xlabel('Số điểm thành viên')
plt.ylabel('Số người đạt được điểm thành viên tương ứng')
plt.hist(data['Score'], bins=50, range=(minScore, maxScore))
plt.show()

"""- Trục x : Số điểm thành viên (Điểm)
- Trục y: Số người người đạt được điểm thành viên tương ứng (Người)

**Nhận xét:**
- Số người có số điểm thành viên đông nhất là 40-50 điểm

**Profession (Nghiệp vụ việc làm)**
"""

#Tần suất xuất hiện của các thuộc tính
print(data['Profession'].value_counts())

# Tính tỉ lệ phần trăm của từng nghề nghiệp
occupation_percentage = data['Profession'].value_counts(normalize=True) * 100

# In ra tỉ lệ phần trăm của từng nghề nghiệp và làm tròn đến 0.1
print(occupation_percentage.round(1))

# Đếm số lượng giá trị unique của mỗi nhóm
value_counts = data['Gender'].value_counts()

# Tổng số nghề nghiệp có trong cột Profession
total_rows = len(data)

# Tính tỉ lệ phần trăm giá trị 'Artist' trong cột 'Profession'
total_Artist = data[data['Profession'] == 'Artist'].count()[0]
percentage_Artist = (total_Artist / total_rows) * 100

# Tính tỉ lệ phần trăm giá trị 'Healthcare' trong cột 'Profession'
total_Healthcare = data[data['Profession'] == 'Healthcare'].count()[0]
percentage_Healthcare = (total_Healthcare / total_rows) * 100

# Tính tỉ lệ phần trăm giá trị 'Entertainment' trong cột 'Profession'
total_Entertainment = data[data['Profession'] == 'Entertainment'].count()[0]
percentage_Entertainment = (total_Entertainment / total_rows) * 100

# Tính tỉ lệ phần trăm giá trị 'Engineer' trong cột 'Profession'
total_Engineer = data[data['Profession'] == 'Engineer'].count()[0]
percentage_Engineer = (total_Engineer / total_rows) * 100

# Tính tỉ lệ phần trăm giá trị 'Doctor' trong cột 'Profession'
total_Doctor = data[data['Profession'] == 'Doctor'].count()[0]
percentage_Doctor = (total_Doctor / total_rows) * 100

# Tính tỉ lệ phần trăm giá trị 'Executive' trong cột 'Profession'
total_Executive = data[data['Profession'] == 'Executive'].count()[0]
percentage_Executive = (total_Executive / total_rows) * 100

# Tính tỉ lệ phần trăm giá trị 'Lawyer' trong cột 'Profession'
total_Lawyer = data[data['Profession'] == 'Lawyer'].count()[0]
percentage_Lawyer = (total_Lawyer / total_rows) * 100

# Tính tỉ lệ phần trăm giá trị 'Marketing' trong cột 'Profession'
total_Marketing = data[data['Profession'] == 'Marketing'].count()[0]
percentage_Marketing = (total_Marketing / total_rows) * 100

# Tính tỉ lệ phần trăm giá trị 'Homemaker' trong cột 'Profession'
total_Homemaker = data[data['Profession'] == 'Homemaker'].count()[0]
percentage_Homemaker = (total_Homemaker / total_rows) * 100

# Dữ liệu tỉ lệ phần trăm giữa các nghề nghiệp
profession_percentage = [percentage_Artist, percentage_Healthcare, percentage_Entertainment, percentage_Engineer, percentage_Doctor, 
                         percentage_Executive, percentage_Lawyer, percentage_Marketing, percentage_Homemaker]

# Tên nhãn cho biểu đồ
labels = ['Artist', 'Healthcare', 'Entertaiment', 'Engineer', 'Doctor', 'Excutive', 'Lawyer', 'Marketing', 'Homemaker']

# Màu sắc cho các miền trong biểu đồ
colors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple', 'pink', 'brown', 'gray']

# Vẽ biểu đồ đồ họa tròn
plt.pie(profession_percentage, labels=labels, colors=colors, autopct='%1.1f%%')

# Đặt tiêu đề cho biểu đồ
plt.title("Tỉ lệ phần trăm giữa các nghề nghiệp")

# Hiển thị biểu đồ
plt.show()

"""**Nhận xét:**
- Số chuyên môn nghiệp vụ nhiều người làm nhất là Artist
- Số chuyên môn nghiệp vụ có ít người làm nhất là Homemaker

**Work Experience (Kinh nghiệm làm việc)**
"""

print(data['WorkExperience'].value_counts())

maxWorkExperience = data['WorkExperience'].max()
minWorkExperience = data['WorkExperience'].min()
plt.xlabel('Số năm kinh nghiệm làm việc')
plt.ylabel('Sô người có kinh nghiệm làm việc tương ứng')
plt.hist(data['WorkExperience'], bins=18, range=(minWorkExperience, maxWorkExperience))
plt.show()

"""- Trục x : Số năm kinh nghiệm làm việc (năm)
- Trục y : Số người có năm kinh nghiệm làm việc tương ứng (Người)

**Nhận xét:**
- Số người có kinh nghiệm làm việc nhiều nhất là 0-2 năm

**Family Size (Số thành viên trong gia đình)**
"""

print(data['FamilySize'].value_counts())

maxFamilySize = data['FamilySize'].max()
minFamilySize = data['FamilySize'].min()
plt.xlabel('Số lượng thành viên trong gia đình')
plt.ylabel('Số lượng người có số thành viên gia đình tương ứng')
plt.hist(data['FamilySize'], bins=5, range=(minFamilySize, maxFamilySize))
plt.show()

"""- Trục x : Số lượng thành viên gia đình (Người)
- Trục y : Số người tương ưng (Người)

**Nhận xét:**
- Số người có số thành viên từ 2-3 người là đông nhất

**2.2.3.** Phân tích đa biến

**Tìm kiếm các mối quan hệ giữa các biến trong dữ liệu bằng cách sử dụng heatmap.**
"""

import seaborn as sns
data.corr()

sns.heatmap(data.corr(),cmap='coolwarm',annot=True, linecolor='white',linewidths=1)

"""Hàm corr trả về độ tương quan giữa các cột có mối liên hệ với nhau:
*   Hệ số tương quan có giá trị âm cho thấy hai biến có mối quan hệ nghịch 
biến hoặc tương quan âm (nghịch biến tuyệt đối khi giá trị bằng -1)
*   Hệ số tương quan có giá trị dương cho thấy mối quan hệ đồng biến hoặc tương quan dương (đồng biến tuyệt đối khi giá trị bằng 1)
*   Tương quan bằng 0 cho hai biến độc lập với nhau. Thông thường độ tương quan để sử dụng nằm trong khoảng 0,8 trở lên

**Nhận xét:**
- Các cặp biến có có hệ số tương quan bằng 1 nên có mối quan hệ đồng biến tuyệt đối như: Age và Age, Annual Income và Annual Income, Score và Score, Work Experience và Work Experience, Family Size và Family Size
- Các cặp biến có hệ số tương quan âm nên có mối quan hệ nghịch biến hoặc tương quan âm như: Score và Age, Score và Work Experience, Work Experience và Score.
- Các cặp biến còn lại có hệ số tương quan dương nên đều có mối quan hệ đồng biến hoặc tương quan dương

# **3. Kết luận**

Vì data không có dữ liệu chuỗi thời gian nên không thể thể thực hiện phân tích chuỗi thời gian

---


Sau khi tiến hành khai phá tập dữ liệu Shop Customer Data Set ta có kết 
luận như sau:

---

- Số lượng người khách hàng thường xuyên mua đồ có độ tuổi là từ 29-40, những người mua hàng có đa phần giới tính là nữ, có thu nhập từ $76000 - $95000.
- Họ thường chi tiêu cho cửa hàng một số điểm từ 40 - 50 và có từ 2-3 thành viên trong gia đình.
"""